# -*- coding: utf-8 -*-
"""salary_estamation.ipynb

Automatically generated by Colaboratory.

Original file is located at
   
"""

#important libaries to import-
import pandas as pd  #pandas [useful for loading the dataset]-numpy[to perform array]
import numpy as np

!pip install scikit-learn

from google.colab import files        #uploading data into online notebook salary_prediction_estimation
uploaded = files.upload()

#to load the data
dataset = pd.read_csv('salary_prediction_estimation.csv')       
print(dataset)

#summarize dataset  
print(dataset.shape)           #no. of rows and columns
print(dataset.head(5))      #head(5)-top 5 values & tail(5)-bottom 5 values

income_set = set(dataset['income'])
dataset['income'] = dataset['income'].map({'<=50k':0, '>50k': 1}).astype(int)
print(dataset.head(20))

#segregate dataset into x and y - inputs/outputs-independent/dependent variables
X = dataset.iloc[:, :-1].values
X

#segregate dataset into x and y - inputs/outputs-independent/dependent variables
y = dataset.iloc[:, -1].values
y

#spiliting the dataset into train and test-x_train&y_train is for train purpose where x_test&y_test is for test purpose.
from sklearn.model_selection  import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25, random_state = 0)

#feacture scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)

error = []

from sklearn.neighbors import KNeighborsClassifier #alg. 
import matplotlib.pyplot as plt    #Data Visualisation



# Calculating error for K values between 1 and 40

for i in range(1, 40):
  model = KNeighborsClassifier (n_neighbors=i) 
  model.fit(X_train, y_train) 
  pred_i = model.predict(X_test)
  error.append(np.mean(pred_i != y_test))
  
plt.figure(figsize=(12, 6))

plt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',
         markerfacecolor="blue", markersize=10)

plt.title('Error Rate K Value')
plt.xlabel('K Value')
plt.ylabel('Mean Error')

#training 
from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors = 5,metric = 'minkowski', p = 2) 
model.fit(X_train, y_train)

#prediction for all the test data 
y_pred = model.predict(X_test)

#to get the accuracy of the model
from sklearn.metrics import confusion_matrix, accuracy_score
print("accuracy of the model:{0}%".format(accuracy_score(y_test,y_pred)*100))

age = int(input("Enter New Employee's Age: "))
edu = int(input("Enter New Employee's Education: ")) 
cg = int(input("Enter New Employee's Captital Gain: "))
wh = int(input("Enter New Employee's Hour's Per week: "))

newEmp = [[age, edu, cg, wh]]

result = model.predict(sc.transform(newEmp))

print(result)

if result == 1:
  print("Employee might got Salary above 50K") 
else:
  print("Customer might not got Salary above 50K")